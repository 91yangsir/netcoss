<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<!-- 1. 配置 SecurityManager!这个安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		
		<property name="cacheManager" ref="cacheManager" />
		<property name="authenticator" ref="authenticator"/>
		<property name="realms">
			<list>
				<ref bean="jdbcRealm" />
			</list>
		</property>
		<property name="rememberMeManager.cookie.maxAge" value="600"></property>
	</bean>
 
 
	 <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>
 
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
		</property>
	</bean>


	<bean id="jdbcRealm" class="com.yangsir.project.realms.ShiroRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!--密码加密的方式 -->
				<property name="hashAlgorithmName" value="MD5"></property>
				<!--密码加密的次数 -->
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
	</bean>


	<!-- 4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro 
		bean 的生命周期方法. -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />

	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<!-- 必须注入安全管理器 -->
		<property name="securityManager" ref="securityManager" />
	</bean>



	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 安全管理器 -->
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/managerLogin.ftl" />
		<property name="successUrl" value="/static/menu.ftl" />
		<property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>

		<!-- 配置哪些页面需要受保护. 以及访问这些页面需要的权限. 1). anon 可以被匿名访问 2). authc 必须认证(即登录)后才可能访问的页面. 
			3). logout 登出. 4). roles 角色过滤器 -->
		<!-- <property name="filterChainDefinitions"> <value> /login.jsp = anon 
			/shiro/login = anon /shiro/logout = logout /user.jsp = roles[user] /admin.jsp 
			= roles[admin] # everything else requires authentication: /** = authc </value> 
			</property> -->
	</bean>

	<!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式，这个是为了解决上面权限shiro过滤器链过长 -->
	<bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder"
		factory-method="buildFilterChainDefinitionMap"></bean>

	<bean id="filterChainDefinitionMapBuilder"
		class="com.yangsir.project.factory.FilterChainDefinitionMapBuilder"></bean>

</beans>
